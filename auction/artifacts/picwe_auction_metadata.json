{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_picweUSDAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_stableCoinAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_trader",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "EnforcedPause",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExpectedPause",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "stableCoinAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableCoinAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					}
				],
				"name": "AuctionCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "targetchainId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "stableCoinAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableCoinAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					}
				],
				"name": "AuctionCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "stableCoinAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableCoinAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "finalPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "finalTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					}
				],
				"name": "AuctionEnded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EscapeModeDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "EscapeModeEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "StableCoinAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "StableCoinRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "StableCoinTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "TokenAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "TokenRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensWithdrawnInEscapeMode",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PAUSER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TRADER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TRANSFER_MANAGER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "activeAuctionCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "activeAuctionIds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "addStableCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "addSupportedToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "auctionCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "auctionIdToActiveIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "auctions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "targetchainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "stableCoinAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "stableCoinAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isBuy",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_requestIds",
						"type": "uint256[]"
					}
				],
				"name": "batchCancelAuctions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_requestIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_targetchainIds",
						"type": "uint256[]"
					},
					{
						"internalType": "address[]",
						"name": "_traders",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "_tokenAddresses",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "_stableCoinAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_stableCoinAmounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_tokenAmounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_startPrices",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_endPrices",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_durations",
						"type": "uint256[]"
					},
					{
						"internalType": "bool[]",
						"name": "_isBuys",
						"type": "bool[]"
					}
				],
				"name": "batchCreateAuctions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "requestIds",
						"type": "uint256[]"
					}
				],
				"name": "batchGetAuctionStatus",
				"outputs": [
					{
						"internalType": "bool[]",
						"name": "",
						"type": "bool[]"
					},
					{
						"internalType": "bool[]",
						"name": "",
						"type": "bool[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					}
				],
				"name": "cancelAuction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "checkAuctionExistsAndActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_targetchainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_trader",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_stableCoinAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_stableCoinAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_tokenAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_startPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_duration",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_isBuy",
						"type": "bool"
					}
				],
				"name": "createAuction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "disableEscapeMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "enableEscapeMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "escapeMode",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "page",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "showAll",
						"type": "bool"
					}
				],
				"name": "getActiveAuctionIds",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "page",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "showAll",
						"type": "bool"
					}
				],
				"name": "getActiveAuctionsData",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "requestId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "targetchainId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "trader",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stableCoinAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "stableCoinAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "startPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "endPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "startTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "endTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isBuy",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct IAuctionStructsEvents.TradeRequest[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "page",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					}
				],
				"name": "getAllTraderTokenBalances",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "tokenAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "requestId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "targetchainId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "trader",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stableCoinAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "stableCoinAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tokenAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "startPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "endPrice",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "startTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "endTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isBuy",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct IAuctionStructsEvents.TradeRequest",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionEndPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionEndTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionIsBuy",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionStableCoinAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionStableCoinAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionStartPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionStartTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionTargetChainId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionTokenAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionTokenAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "getAuctionTrader",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "targettokenAddress",
						"type": "address"
					}
				],
				"name": "getIncompleteAuctionsByToken",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "requestIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "currentPrices",
						"type": "uint256[]"
					},
					{
						"internalType": "bool[]",
						"name": "isBuyArray",
						"type": "bool[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "getTraderTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "picweUSD",
				"outputs": [
					{
						"internalType": "contract IPicweUSD",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "precisionFactor",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					}
				],
				"name": "proxyBuy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					}
				],
				"name": "proxySell",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "removeStableCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "removeSupportedToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_precisionFactor",
						"type": "uint8"
					}
				],
				"name": "setPrecisionFactor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "supportedStableCoins",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "supportedTokenList",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "supportedTokens",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "traderTokenBalances",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferStableCoin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "trader",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "transferTokensToTrader",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "withdrawTokensInEscapeMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				],
				"EnforcedPause()": [
					{
						"details": "The operation failed because the contract is paused."
					}
				],
				"ExpectedPause()": [
					{
						"details": "The operation failed because the contract is not paused."
					}
				]
			},
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"addStableCoin(address)": {
					"details": " This function is used to add a new stable coin to the supported stable coins. ",
					"params": {
						"token": "The address of the stable coin to add. "
					}
				},
				"addSupportedToken(address)": {
					"details": "Add a supported token",
					"params": {
						"token": "The address of the token to add"
					}
				},
				"batchCancelAuctions(uint256[])": {
					"details": "Batch cancel multiple active auctions",
					"params": {
						"_requestIds": "Array of unique identifiers for the auction requests to be cancelled"
					}
				},
				"batchCreateAuctions(uint256[],uint256[],address[],address[],address[],uint256[],uint256[],uint256[],uint256[],uint256[],bool[])": {
					"details": "Batch create multiple auctions",
					"params": {
						"_durations": "Array of auction durations",
						"_endPrices": "Array of end prices",
						"_isBuys": "Array of boolean flags indicating buy or sell auctions",
						"_requestIds": "Array of unique identifiers for the auction requests",
						"_stableCoinAddresses": "Array of stable coin addresses",
						"_stableCoinAmounts": "Array of stable coin amounts",
						"_startPrices": "Array of start prices",
						"_targetchainIds": "Array of target chain IDs",
						"_tokenAddresses": "Array of token addresses",
						"_tokenAmounts": "Array of token amounts",
						"_traders": "Array of trader addresses"
					}
				},
				"batchGetAuctionStatus(uint256[])": {
					"details": "batchGetAuctionStatus",
					"params": {
						"requestIds": "The array of auction IDs to check."
					},
					"returns": {
						"_0": "Two boolean arrays, the first indicating whether the auction exists, and the second indicating whether the auction is active."
					}
				},
				"cancelAuction(uint256)": {
					"details": "Cancels an active auction. ",
					"params": {
						"_requestId": "The unique identifier for the auction request. "
					}
				},
				"checkAuctionExistsAndActive(uint256)": {
					"details": "checkAuctionExistsAndActive",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"exists": "The auction exists",
						"isActive": "The auction is active"
					}
				},
				"createAuction(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,bool)": {
					"details": " This function is used to create a new auction request. The auction can be for buying or selling tokens. ",
					"params": {
						"_duration": "The duration of the auction in seconds.",
						"_endPrice": "If it's a buy auction, this is the maximum buy price; if it's a sell auction, this is the minimum sell price.",
						"_isBuy": "Indicates whether this is a buy auction or a sell auction. ",
						"_requestId": "The unique identifier for the auction request.",
						"_stableCoinAddress": "The address of the stable coin.",
						"_stableCoinAmount": "If it's a buy auction, this is the amount of stable coins to be purchased; if it's a sell auction, this is the minimum amount of stable coins to be received.",
						"_startPrice": "If it's a buy auction, this is the minimum buy price; if it's a sell auction, this is the maximum sell price.",
						"_targetchainId": "The ID of the target chain, which must match the current chain ID.",
						"_tokenAddress": "The address of the token.",
						"_tokenAmount": "If it's a buy auction, this is the minimum amount of tokens to be received; if it's a sell auction, this is the amount of tokens to be sold.",
						"_trader": "The address of the trader initiating the auction."
					}
				},
				"disableEscapeMode()": {
					"details": "Disable escape mode Can only be called by the admin"
				},
				"enableEscapeMode()": {
					"details": "Enable escape mode Can only be called by the admin"
				},
				"getActiveAuctionIds(uint256,uint256,bool)": {
					"details": "Get active auction IDs with pagination",
					"params": {
						"page": "The page number to retrieve, starting from 0.",
						"pageSize": "The number of auctions per page. Set to 0 to return all active auctions.",
						"showAll": "If true, return all active auctions regardless of pageSize and page"
					},
					"returns": {
						"_0": "An array of active auction IDs, sorted with newest first"
					}
				},
				"getActiveAuctionsData(uint256,uint256,bool)": {
					"details": "Get active auction data with pagination",
					"params": {
						"page": "The page number to retrieve, starting from 0.",
						"pageSize": "The number of auctions per page. Set to 0 to return all active auctions.",
						"showAll": "If true, return all active auctions regardless of pageSize and page"
					},
					"returns": {
						"_0": "An array of TradeRequest structs containing active auction data, sorted with newest first"
					}
				},
				"getAllTraderTokenBalances(address,uint256,uint256)": {
					"details": "Get all token balances for a specific trader",
					"params": {
						"page": "The page number",
						"pageSize": "The number of items per page",
						"trader": "The address of the trader"
					},
					"returns": {
						"balances": "Array of corresponding balances",
						"tokenAddresses": "Array of token addresses"
					}
				},
				"getAuctionDetails(uint256)": {
					"details": " Retrieves detailed information of an auction using the auction ID. ",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "Returns detailed information of the auction with the specified ID."
					}
				},
				"getAuctionEndPrice(uint256)": {
					"details": "Retrieves the end price of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The end price of the auction."
					}
				},
				"getAuctionEndTime(uint256)": {
					"details": "Retrieves the end time of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The end time of the auction."
					}
				},
				"getAuctionIsBuy(uint256)": {
					"details": "Retrieves the buy status of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "True if the auction is a buy auction, false otherwise."
					}
				},
				"getAuctionStableCoinAddress(uint256)": {
					"details": "Retrieves the stable coin address of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The stable coin address of the auction."
					}
				},
				"getAuctionStableCoinAmount(uint256)": {
					"details": "Retrieves the stable coin amount of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The stable coin amount of the auction."
					}
				},
				"getAuctionStartPrice(uint256)": {
					"details": "Retrieves the start price of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The start price of the auction."
					}
				},
				"getAuctionStartTime(uint256)": {
					"details": "Retrieves the start time of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The start time of the auction."
					}
				},
				"getAuctionTargetChainId(uint256)": {
					"details": "Retrieves the target chain ID of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The target chain ID of the auction."
					}
				},
				"getAuctionTokenAddress(uint256)": {
					"details": "Retrieves the token address of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The token address of the auction."
					}
				},
				"getAuctionTokenAmount(uint256)": {
					"details": "Retrieves the token amount of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The token amount of the auction."
					}
				},
				"getAuctionTrader(uint256)": {
					"details": "Retrieves the trader address of a specific auction.",
					"params": {
						"requestId": "The unique identifier of the auction."
					},
					"returns": {
						"_0": "The trader address of the auction."
					}
				},
				"getIncompleteAuctionsByToken(address)": {
					"details": "Get all incomplete auctions for a specific token address, along with their current prices and buy/sell directions",
					"params": {
						"targettokenAddress": "The target token address"
					},
					"returns": {
						"currentPrices": "Array of current prices for incomplete auctions",
						"isBuyArray": "Array of buy/sell directions for incomplete auctions (true for buy, false for sell)",
						"requestIds": "Array of IDs for incomplete auctions"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getTraderTokenBalance(address,address)": {
					"details": " Get the token balance of a specific trader for a specific token ",
					"params": {
						"tokenAddress": "The address of the token",
						"trader": "The address of the trader"
					},
					"returns": {
						"_0": "The balance of the specified token held by the trader"
					}
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"proxyBuy(uint256)": {
					"details": " This function is used to proxy a buy auction. The auction must be active and must be a buy auction. ",
					"params": {
						"_requestId": "The unique identifier for the auction request. "
					}
				},
				"proxySell(uint256)": {
					"details": " This function is used to proxy a sell auction. The auction must be active and must be a sell auction. ",
					"params": {
						"_requestId": "The unique identifier for the auction request. "
					}
				},
				"removeStableCoin(address)": {
					"details": " This function is used to remove a stable coin from the supported stable coins. ",
					"params": {
						"token": "The address of the stable coin to remove. "
					}
				},
				"removeSupportedToken(address)": {
					"details": "Remove a supported token",
					"params": {
						"token": "The address of the token to remove"
					}
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setPrecisionFactor(uint8)": {
					"details": "Sets the precision factor.",
					"params": {
						"_precisionFactor": "The new precision factor."
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transferStableCoin(address,address,uint256)": {
					"details": " This function is used to transfer stable coins from the contract to another address. ",
					"params": {
						"amount": "The amount of stable coins to transfer. ",
						"to": "The address to transfer the stable coins to.",
						"token": "The address of the stable coin to transfer."
					}
				},
				"transferTokensToTrader(address,address)": {
					"details": " This function is used to transfer tokens to a specific trader based on their balance in traderTokenBalances. ",
					"params": {
						"tokenAddress": "The address of the token to transfer. ",
						"trader": "The address of the trader to transfer tokens to."
					}
				},
				"withdrawTokensInEscapeMode(address)": {
					"details": "Allow customers to withdraw their token balances in escape mode",
					"params": {
						"tokenAddress": "The address of the token to withdraw"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addStableCoin(address)": {
					"notice": "This function can only be called by users with the DEFAULT_ADMIN_ROLE.A StableCoinAdded event will be triggered after the stable coin is added."
				},
				"cancelAuction(uint256)": {
					"notice": "This function can only be called by the auction creator or the contract owner."
				},
				"createAuction(uint256,uint256,address,address,address,uint256,uint256,uint256,uint256,uint256,bool)": {
					"notice": "This function can only be called by users with the TRADER_ROLE.An AuctionCreated event will be triggered after the auction is created."
				},
				"proxyBuy(uint256)": {
					"notice": "This function can only be called by users.An AuctionEnded event will be triggered after the auction is ended."
				},
				"proxySell(uint256)": {
					"notice": "This function can only be called by users.An AuctionEnded event will be triggered after the auction is ended."
				},
				"removeStableCoin(address)": {
					"notice": "This function can only be called by users with the DEFAULT_ADMIN_ROLE.A StableCoinRemoved event will be triggered after the stable coin is removed."
				},
				"transferStableCoin(address,address,uint256)": {
					"notice": "This function can only be called by users with the TRANSFER_MANAGER_ROLE."
				},
				"transferTokensToTrader(address,address)": {
					"notice": "This function can only be called by users with the TRANSFER_MANAGER_ROLE."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"auction/auction.sol": "picwe_auction"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
			"license": "MIT",
			"urls": [
				"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
				"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Pausable.sol": {
			"keccak256": "0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc",
				"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"auction/AuctionInternal.sol": {
			"keccak256": "0xd8ee9042720dc42502eab99e4d09f1f2fbf43a9777c300380b4908a0f1b0eb7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://4883d51d6736400a7880ea38cf3872d78222a054c9f96eefaa6eb8aec3b5c519",
				"dweb:/ipfs/QmVQRY9vaEphbaZFmW8G82g5df6FGM4rXZVuCVcdcpkczF"
			]
		},
		"auction/IAuctionStructsEvents.sol": {
			"keccak256": "0xdf5cc3ad6d43ae35387579da40599b6e901cc6809d4009f5ce37bcb0510fe90c",
			"license": "MIT",
			"urls": [
				"bzz-raw://eb6e43ce5bb7061782037e911f11af9e3b36cc5dbd8d062f912497f7f45f0272",
				"dweb:/ipfs/QmUB8y982e24vnV5dgKsEJhnsccCpR1d2og6kzLCUYC2dM"
			]
		},
		"auction/IPicweUSD.sol": {
			"keccak256": "0xca916d69b6d6e91272bdbf75d78ab96a83c86f619d847916c4b1cd1c91830870",
			"license": "MIT",
			"urls": [
				"bzz-raw://89fecb9f4008c4ee310666ddbc8d4a2d60736c0596bef739212c3f4cc418a01a",
				"dweb:/ipfs/QmWZP6ZFXAyk6KoXryvP8Cb5j9NuSKyZYFchsTXUZPVNiz"
			]
		},
		"auction/auction.sol": {
			"keccak256": "0x43270b6be50e4a5dc44327c61218da1f5fa8b92aa297567402f0ae6dfcba7e30",
			"license": "MIT",
			"urls": [
				"bzz-raw://21942146a7a2cc35b79f7a4f4e54840e9556c2473b686cd7074cd1c3e2159aa1",
				"dweb:/ipfs/QmRvQdXpdSH5bETmXwemgmMhndXrdc6diuyAj6cZYa9Jhv"
			]
		}
	},
	"version": 1
}